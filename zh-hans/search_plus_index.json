{"./":{"url":"./","title":"主页","keywords":"","body":"欢迎访问 GOST 帮助文档(第三方) 本站所有命令环境均为Linux，特殊环境另有备注 官方链接 官方Github : https://github.com/go-gost/gost 官方DOCS: https://latest.gost.run 功能特性 多端口监听 多级转发链 多协议支持 TCP/UDP端口转发 TCP/UDP透明代理 DNS解析和代理 TUN/TAP设备 负载均衡 路由控制 准入控制 动态配置 Prometheus监控指标 Web API "},"Entry.html":{"url":"Entry.html","title":"入门","keywords":"","body":"欢迎访问 GOST 帮助文档(第三方) 本站所有命令环境均为Linux，特殊环境另有备注 官方链接 官方Github : https://github.com/go-gost/gost 官方DOCS: https://latest.gost.run 功能特性 多端口监听 多级转发链 多协议支持 TCP/UDP端口转发 TCP/UDP透明代理 DNS解析和代理 TUN/TAP设备 负载均衡 路由控制 准入控制 动态配置 Prometheus监控指标 Web API "},"example1/tcp.html":{"url":"example1/tcp.html","title":"TCP","keywords":"","body":"开启一个TCP转发服务 监听端口 8080 并转发到 192.168.1.1:8080 gost -L tcp://:8080/192.168.1.1:8080 开启多个TCP转发服务 监听端口 8080 并转发到 192.168.1.1:8080 监听端口 8090 并转发到 192.168.1.1:8090 gost -L tcp://:8080/192.168.1.1:8080 -L tcp://:8090/192.168.1.1:8090 使用多个代理转发服务 监听端口 8080 通过tls://192.168.1.2:8090转发到 192.168.1.1:8080 监听端口 8082 通过tls://192.168.1.3:8091转发到 192.168.1.4:8080 gost -L tcp://:8082/192.168.1.4:8080 -F tls://192.168.1.3:8091 -L tcp://:8080/192.168.1.1:8080 -F tls://192.168.1.2:8090 "},"example1/udp.html":{"url":"example1/udp.html","title":"UDP","keywords":"","body":"开启一个UDP转发服务 监听端口 8080 并转发到 192.168.1.1:8080 gost -L udp://:8080/192.168.1.1:8080 开启多个UDP转发服务 监听端口 8080 并转发到 192.168.1.1:8080 监听端口 8090 并转发到 192.168.1.1:8090 gost -L udp://:8080/192.168.1.1:8080 -L udp://:8090/192.168.1.1:8090 参数 backlog UDP连接队列大小(示例backlog=256 默认128) keepAlive 是否保持连接，默认当返回响应数据给客户端后立即断开连接(示例keepAlive=true 默认false) ttl UDP连接超时时长，当keepAlive为true时有效(示例ttl=10s 默认5s) readBufferSize UDP读数据缓冲区字节大小(示例readBufferSize=2000 默认1500) readQueueSize UDP连接读数据队列大小(示例readQueueSize=256 默认128) "},"example1/tls.html":{"url":"example1/tls.html","title":"TLS","keywords":"","body":"开启一个TLS服务端 gost -L tls://:8080 "},"example1/mtls.html":{"url":"example1/mtls.html","title":"MTLS","keywords":"","body":"开启一个MTLS服务端 gost -L mtls://:8443 参数 backlog UDP连接队列大小(示例backlog=256 默认128) muxKeepAliveDisabled 多路复用会话设置。禁用心跳保活(示例muxKeepAliveDisabled=true 默认false) muxKeepAliveInterval 多路复用会话设置。心跳间隔(示例muxKeepAliveInterval=20s 默认10s) muxKeepAliveTimeout 多路复用会话设置。心跳超时(示例muxKeepAliveTimeout=60s 默认30s) muxMaxFrameSize 多路复用会话设置。最大数据帧大小(字节)(示例muxMaxFrameSize=65536 默认32768) muxMaxReceiveBuffer 多路复用会话设置。最大接收缓冲大小(字节)(示例muxMaxReceiveBuffer=8388603 默认4194304) muxMaxStreamBuffer 多路复用会话设置。最大流缓冲大小(字节)(示例muxMaxStreamBuffer=30000 默认 65536) "},"example1/ws.html":{"url":"example1/ws.html","title":"WS","keywords":"","body":"开启一个WS服务端 gost -L ws://:8443 参数 path 请求URI(示例path=/abc 默认/ws) backlog 请求队列大小(示例backlog=256 默认128) header 自定义HTTP响应头(示例host=baidu.com 只能在配置文件内设定) handshakeTimeout 设置握手超时时长(示例handshakeTimeout=5s) readHeaderTimeout 设置请求头读取超时时长(示例readHeaderTimeout=5s) readBufferSize 读缓冲区大小(示例readBufferSize=2048) writeBufferSize 写缓冲区大小(示例writeBufferSize=2048) enableCompression 开启压缩(示例enableCompression=true 默认false) "},"example1/wss.html":{"url":"example1/wss.html","title":"WSS","keywords":"","body":"开启一个WSS服务端 gost -L wss://:8443 参数 path 请求URI(示例path=/abc 默认/ws) backlog 请求队列大小(示例backlog=256 默认128) header 自定义HTTP响应头(示例host=baidu.com 只能在配置文件内设定) handshakeTimeout 设置握手超时时长(示例handshakeTimeout=5s) readHeaderTimeout 设置请求头读取超时时长(示例readHeaderTimeout=5s) readBufferSize 读缓冲区大小(示例readBufferSize=2048) writeBufferSize 写缓冲区大小(示例writeBufferSize=2048) enableCompression 开启压缩(示例enableCompression=true 默认false) "},"example1/mws.html":{"url":"example1/mws.html","title":"MWS","keywords":"","body":"开启一个MWS服务 监听端口 8080 并转发到 192.168.1.1:8080 gost -L http+mws://:8080?path=/ws 开启一个MWS+TLS服务 gost -L http+mwss://:8443?path=/ws path 请求URI(示例/abc 默认/ws) backlog 请求队列大小(示例backlog=256 默认128) header 自定义HTTP响应头(示例host=baidu.com 只能在配置文件内设定) handshakeTimeout 设置握手超时时长(示例handshakeTimeout=20s 默认5s) readHeaderTimeout 设置请求头读取超时时长(示例readHeaderTimeout=60s) readBufferSize 读缓冲区大小(字节)(示例readBufferSize=65536) writeBufferSize 写缓冲区大小(字节)(示例writeBufferSize =8388603) enableCompression 开启压缩(示例enableCompression=true 默认false) muxKeepAliveDisabled 多路复用会话设置。禁用心跳保活(示例muxKeepAliveDisabled=true 默认false) muxKeepAliveInterval 多路复用会话设置。心跳间隔(示例muxKeepAliveInterval=20s 默认10s) muxKeepAliveTimeout 多路复用会话设置。心跳超时(示例muxKeepAliveTimeout=60s 默认30s) muxMaxFrameSize 多路复用会话设置。最大数据帧大小(字节)(示例muxMaxFrameSize=65536 默认32768) muxMaxReceiveBuffer 多路复用会话设置。最大接收缓冲大小(字节)(示例muxMaxReceiveBuffer=8388603 默认4194304) muxMaxStreamBuffer 多路复用会话设置。最大流缓冲大小(字节)(示例muxMaxStreamBuffer=30000 默认 65536) "},"example1/quic.html":{"url":"example1/quic.html","title":"QUIC","keywords":"","body":"开启一个TCP转发服务 监听端口 8080 并转发到 192.168.1.1:8080 %accordion%命令行%accordion% gost -L tcp://:8080/192.168.1.1:8080 %/accordion% %accordion%yaml%accordion% services: - name: service-0 addr: :8080 handler: type: tcp listener: type: tcp forwarder: targets: - 192.168.1.1:8080 %/accordion% %accordion%json%accordion% { \"services\": [ { \"name\": \"service-0\", \"addr\": \":8080\", \"handler\": { \"type\": \"tcp\" }, \"listener\": { \"type\": \"tcp\" }, \"forwarder\": { \"targets\": [ \"192.168.1.1:8080\" ] } } ] } %/accordion% 开启多个TCP转发服务 监听端口 8080 并转发到 192.168.1.1:8080 监听端口 8090 并转发到 192.168.1.1:8090 %accordion%命令行%accordion% gost -L tcp://:8080/192.168.1.1:8080 -L tcp://:8090/192.168.1.1:8090 %/accordion% %accordion%yaml%accordion% services: - name: service-0 addr: :8080 handler: type: tcp listener: type: tcp forwarder: targets: - 192.168.1.1:8080 - name: service-1 addr: :8090 handler: type: tcp listener: type: tcp forwarder: targets: - 192.168.1.1:8090 %/accordion% %accordion%json%accordion% { \"services\": [ { \"name\": \"service-0\", \"addr\": \":8080\", \"handler\": { \"type\": \"tcp\" }, \"listener\": { \"type\": \"tcp\" }, \"forwarder\": { \"targets\": [ \"192.168.1.1:8080\" ] } }， { \"name\": \"service-1\", \"addr\": \":8090\", \"handler\": { \"type\": \"tcp\" }, \"listener\": { \"type\": \"tcp\" }, \"forwarder\": { \"targets\": [ \"192.168.1.1:8090\" ] } } ] } %/accordion% "},"example1/http2.html":{"url":"example1/http2.html","title":"HTTP2","keywords":"","body":"开启一个TCP转发服务 监听端口 8080 并转发到 192.168.1.1:8080 %accordion%命令行%accordion% gost -L tcp://:8080/192.168.1.1:8080 %/accordion% %accordion%yaml%accordion% services: - name: service-0 addr: :8080 handler: type: tcp listener: type: tcp forwarder: targets: - 192.168.1.1:8080 %/accordion% %accordion%json%accordion% { \"services\": [ { \"name\": \"service-0\", \"addr\": \":8080\", \"handler\": { \"type\": \"tcp\" }, \"listener\": { \"type\": \"tcp\" }, \"forwarder\": { \"targets\": [ \"192.168.1.1:8080\" ] } } ] } %/accordion% 开启多个TCP转发服务 监听端口 8080 并转发到 192.168.1.1:8080 监听端口 8090 并转发到 192.168.1.1:8090 %accordion%命令行%accordion% gost -L tcp://:8080/192.168.1.1:8080 -L tcp://:8090/192.168.1.1:8090 %/accordion% %accordion%yaml%accordion% services: - name: service-0 addr: :8080 handler: type: tcp listener: type: tcp forwarder: targets: - 192.168.1.1:8080 - name: service-1 addr: :8090 handler: type: tcp listener: type: tcp forwarder: targets: - 192.168.1.1:8090 %/accordion% %accordion%json%accordion% { \"services\": [ { \"name\": \"service-0\", \"addr\": \":8080\", \"handler\": { \"type\": \"tcp\" }, \"listener\": { \"type\": \"tcp\" }, \"forwarder\": { \"targets\": [ \"192.168.1.1:8080\" ] } }， { \"name\": \"service-1\", \"addr\": \":8090\", \"handler\": { \"type\": \"tcp\" }, \"listener\": { \"type\": \"tcp\" }, \"forwarder\": { \"targets\": [ \"192.168.1.1:8090\" ] } } ] } %/accordion% "},"example1/http3.html":{"url":"example1/http3.html","title":"HTTP3","keywords":"","body":"开启一个TCP转发服务 监听端口 8080 并转发到 192.168.1.1:8080 %accordion%命令行%accordion% gost -L tcp://:8080/192.168.1.1:8080 %/accordion% %accordion%yaml%accordion% services: - name: service-0 addr: :8080 handler: type: tcp listener: type: tcp forwarder: targets: - 192.168.1.1:8080 %/accordion% %accordion%json%accordion% { \"services\": [ { \"name\": \"service-0\", \"addr\": \":8080\", \"handler\": { \"type\": \"tcp\" }, \"listener\": { \"type\": \"tcp\" }, \"forwarder\": { \"targets\": [ \"192.168.1.1:8080\" ] } } ] } %/accordion% 开启多个TCP转发服务 监听端口 8080 并转发到 192.168.1.1:8080 监听端口 8090 并转发到 192.168.1.1:8090 %accordion%命令行%accordion% gost -L tcp://:8080/192.168.1.1:8080 -L tcp://:8090/192.168.1.1:8090 %/accordion% %accordion%yaml%accordion% services: - name: service-0 addr: :8080 handler: type: tcp listener: type: tcp forwarder: targets: - 192.168.1.1:8080 - name: service-1 addr: :8090 handler: type: tcp listener: type: tcp forwarder: targets: - 192.168.1.1:8090 %/accordion% %accordion%json%accordion% { \"services\": [ { \"name\": \"service-0\", \"addr\": \":8080\", \"handler\": { \"type\": \"tcp\" }, \"listener\": { \"type\": \"tcp\" }, \"forwarder\": { \"targets\": [ \"192.168.1.1:8080\" ] } }， { \"name\": \"service-1\", \"addr\": \":8090\", \"handler\": { \"type\": \"tcp\" }, \"listener\": { \"type\": \"tcp\" }, \"forwarder\": { \"targets\": [ \"192.168.1.1:8090\" ] } } ] } %/accordion% "}}